# Copyright (c) 2021 Oracle and/or its affiliates.
# 
# The Universal Permissive License (UPL), Version 1.0
# 
# Subject to the condition set forth below, permission is hereby granted to any
# person obtaining a copy of this software, associated documentation and/or data
# (collectively the "Software"), free of charge and under any and all copyright
# rights in the Software, and any and all patent rights owned or freely
# licensable by each licensor hereunder covering either (i) the unmodified
# Software as contributed to or provided by such licensor, or (ii) the Larger
# Works (as defined below), to deal in both
# 
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
# one is included with the Software (each a "Larger Work" to which the Software
# is contributed by such licensors),
# without restriction, including without limitation the rights to copy, create
# derivative works of, display, perform, and distribute the Software and make,
# use, sell, offer for sale, import, export, have made, and have sold the
# Software and the Larger Work(s), and to sublicense the foregoing rights on
# either these or other terms.
# 
# This license is subject to the following condition:
# The above copyright notice and either this complete permission notice or at
# a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stockmanager
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: stockmanager
  template:
    metadata:
      labels:
        app: stockmanager
      #annotations:
      #  prometheus.io/path: /metrics
      #  prometheus.io/port: "9081"
      #  prometheus.io/scrape: "true"
    spec:
      containers:
      - name: stockmanager
        image: ${OCIR_HOST}/${OCIR_STORAGE_NAMESPACE}/${YOUR_INITIALS}devops/stockmanager:${STOCKMANAGER_VERSION}
        imagePullPolicy: IfNotPresent 
        ports:
        - name: service-port
          containerPort: 8081
        - name: health-port
          containerPort: 9081
        env:
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSourceClassName
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: dataSourceClassName
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.url
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: url
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.user
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: username
        - name: javax.sql.DataSource.stockmanagerDataSource.dataSource.password
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: password
        - name: hibernate.dialect
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: hibernatedialect
        - name: hibernate.hbm2ddl.auto
          valueFrom:
            secretKeyRef:
              name: stockmanagerdb
              key: hibernateauto
        resources:
          limits:
            # Set this to be quarter of a CPU for now
            cpu: "250m"
        # Use this to check if the pod is alive
        livenessProbe:
          #Simple check to see if the status call works
          # If must return a 200 - 399 http status code
          httpGet:
             path: /health/live
             port: health-port
          # Give it time to make sure it's had a chance to start up
          # Comment this out when using a startup probe
          initialDelaySeconds: 120
          # Let it have a 5 second timeout to wait for a response
          timeoutSeconds: 5
          # Check every 5 seconds (default is 1)
          periodSeconds: 5
          # Need to have 3 failures before we decide the pod is dead, not just slow
          failureThreshold: 3
        # This checks if the pod is ready to process requests
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - 'curl -s http://localhost:9081/health/ready | grep "\"outcome\":\"UP\""'
          # No point in checking until it's been running for at least 15 seconds
          # Comment this out when using a startup probe
          initialDelaySeconds: 15
          # Allow a short delay for the response
          timeoutSeconds: 10
          # Check every 20 seconds
          periodSeconds: 20
          # Need at least only one fail for this to be a problem
          failureThreshold: 1
        # Use this to check if the pod is started this has to pass before the liveness kicks in
        # note that this was released as beta in k8s V 1.18
        startupProbe:
          #Simple check to see if the status call works
          # If must return a 200 - 399 http status code
          httpGet:
             path: /status
             port: service-port
          # No initial delay - it starts checking immediately
          # Let it have a 5 second timeout
          timeoutSeconds: 5
          # allow for up to 24 failures
          failureThreshold: 24
          # Check every 10 seconds
          periodSeconds: 10
          # If after failureThreshold * periodSeconds it's not up and running then it's determined to have failed (4 mins in this case)
        volumeMounts:
        - name: sm-config-map-vol
          mountPath: /conf
          readOnly: true
        - name: sm-conf-secure-vol
          mountPath: /confsecure
          readOnly: true
        - name: sm-wallet-atp
          mountPath: /Wallet_ATP
          readOnly: true
      volumes:
      - name: sm-config-map-vol
        configMap:
          name: sm-config-map
      - name: sm-conf-secure-vol
        secret:
          secretName: sm-conf-secure
      - name: sm-wallet-atp
        secret:
          secretName: sm-wallet-atp
#      imagePullSecrets:
#      - name: my-docker-reg
